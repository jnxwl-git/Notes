- Запуск
docker-compose up

- Запуск в bg
docker-compose up -d

- Остановка и удаление контейнеров и сети
docker-compose down

- Пересобрать образ (при внесении изменений)
docker-compose up -d --build

- Переменные среды
mysql:
  image: mysql
  ...
  environment:
    MYSQL_ROOT_PASSWORD: passwd
    MYSQL_DATABASE: time_db
  ...



Структура:

-docker-compose
  -app
    main.py
    Dockerfile
 docker-compose.yml


[main.py]
from pymongo import MongoClient
from pprint import pprint
MONGO_URL = "mongodb://mongo:27017"
client = MongoClient(MONGO_URL)
db = client.admin
dbs_list = db.command("listDatabases")
pprint(dbs_list)


[Dockerfile]
FROM python:alpine

WORKDIR /app

RUN pip install pymongo

COPY . .

CMD [ "python", "main.py" ]


[docker-compose.yml]
version: '3'

services:
  app:
    build: ./app
  mongo:
    image: mongo
    restart: always

----------------------
[ docker-compose.yml ]
----------------------

version: '3'

services:
  frontend:
    build: ./frontend
    restart: always
    ports:
      - '3333:3000'
    volumes:
      - /app/node_modules /* использовать файлы из образа (не перезаписывать) */
      - ./frontend:/app /* host:container */
  backend:
    build: ./api
    restart: always
    ports:
      - '5555:5001'
    depends_on: /* запуск бэкенда после старта контейнера с mysql */
      - mysql
    volumes:
      - /app/node_modules
      - ./api:/app
  mysql:
    image: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: time_db
    volumes:
      - mysql_data:/var/lib/mysql /* подключение тома внутри Docker Host с mysql */
  adminer:
    image: adminer
    restart: always
    ports:
      - '8888:8000'

volumes:
  mysql_data:
